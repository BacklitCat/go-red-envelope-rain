// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	rainFieldNames          = builder.RawFieldNames(&Rain{})
	rainRows                = strings.Join(rainFieldNames, ",")
	rainRowsExpectAutoSet   = strings.Join(stringx.Remove(rainFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	rainRowsWithPlaceHolder = strings.Join(stringx.Remove(rainFieldNames, "`user_account`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheRainUserAccountPrefix = "cache:rain:userAccount:"
)

type (
	rainModel interface {
		Insert(ctx context.Context, data *Rain) (sql.Result, error)
		FindOne(ctx context.Context, userAccount string) (*Rain, error)
		Update(ctx context.Context, data *Rain) error
		Delete(ctx context.Context, userAccount string) error
	}

	defaultRainModel struct {
		sqlc.CachedConn
		table string
	}

	Rain struct {
		UserAccount string    `db:"user_account"` // 账号
		Status      bool      `db:"status"`       // 是否可以抽取（黑名单）
		Remaining   int64     `db:"remaining"`    // 剩余次数
		Balance     int64     `db:"balance"`      // 余额
		CreateTime  time.Time `db:"create_time"`
		UpdateTime  time.Time `db:"update_time"`
	}
)

func newRainModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultRainModel {
	return &defaultRainModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`rain`",
	}
}

func (m *defaultRainModel) Delete(ctx context.Context, userAccount string) error {
	rainUserAccountKey := fmt.Sprintf("%s%v", cacheRainUserAccountPrefix, userAccount)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `user_account` = ?", m.table)
		return conn.ExecCtx(ctx, query, userAccount)
	}, rainUserAccountKey)
	return err
}

func (m *defaultRainModel) FindOne(ctx context.Context, userAccount string) (*Rain, error) {
	rainUserAccountKey := fmt.Sprintf("%s%v", cacheRainUserAccountPrefix, userAccount)
	var resp Rain
	err := m.QueryRowCtx(ctx, &resp, rainUserAccountKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `user_account` = ? limit 1", rainRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, userAccount)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRainModel) Insert(ctx context.Context, data *Rain) (sql.Result, error) {
	rainUserAccountKey := fmt.Sprintf("%s%v", cacheRainUserAccountPrefix, data.UserAccount)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, rainRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserAccount, data.Status, data.Remaining, data.Balance)
	}, rainUserAccountKey)
	return ret, err
}

func (m *defaultRainModel) Update(ctx context.Context, data *Rain) error {
	rainUserAccountKey := fmt.Sprintf("%s%v", cacheRainUserAccountPrefix, data.UserAccount)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `user_account` = ?", m.table, rainRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Status, data.Remaining, data.Balance, data.UserAccount)
	}, rainUserAccountKey)
	return err
}

func (m *defaultRainModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheRainUserAccountPrefix, primary)
}

func (m *defaultRainModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `user_account` = ? limit 1", rainRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultRainModel) tableName() string {
	return m.table
}
